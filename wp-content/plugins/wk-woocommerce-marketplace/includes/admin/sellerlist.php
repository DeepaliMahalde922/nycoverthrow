<?phpif( ! class_exists( 'WP_List_Table' ) ) {    require_once( ABSPATH . 'wp-admin/includes/class-wp-list-table.php' );}class Seller_List_Table extends WP_List_Table{	public function __construct() {        parent::__construct(            array(                'singular' => 'singular_form',                'plural'   => 'plural_form',                'ajax'     => false            )        );        add_action( 'admin_menu', array($this,'register_mp_menu_page') );    }	function delete_mp_seller()	{	global $wpdb;	if(isset($_GET['action']) && $_GET['action']=='delete' && isset($_GET['user'])&& isset($_GET['_wpnonce']))		{			if(wp_create_nonce('del_mp_nonceuser_'.$_GET['user'])==$_GET['_wpnonce'])			{			$nonce_del=wp_create_nonce('confirm_yes_mp_nonceuser_'.$_GET['user']);			/*==================*/				$user_id=$_GET['user'];				$user=get_user_by('id',$user_id);				?>			<form method="post" action="<?php echo "?page=sellers&action=delete&user=".$_GET['user']."&_wpnonce=".$nonce_del.""; ?>">				<div class="wrap">					<h2><?php echo __('Delete Users', 'marketplace'); ?></h2>						<p><?php echo __('You have specified this user for deletion:', 'marketplace'); ?></p>					<ul>						<li><input type="hidden" value="15" name="users[]">ID #<?php echo $user_id; ?>: <?php echo $user->user_nicename; ?></li>					</ul>					<fieldset>						<p>							<legend><?php echo __('What should be done with content owned by this user?', 'marketplace'); ?></legend>						</p>						<ul style="list-style:none;">							<li>								<label>									<input type="radio" value="delete" name="delete_option" id="delete_option0" checked="">									<?php echo __('Delete all content.', 'marketplace'); ?>								</label>							</li>							<li>								<input type="radio" value="reassign" name="delete_option" id="delete_option1">								<label for="delete_option1">									<?php echo __('Attribute all content to:', 'marketplace'); ?>								</label>								<select class="" id="reassign_user" name="reassign_user">									<?php									$sql_query="SELECT * FROM {$wpdb->prefix}mpsellerinfo WHERE seller_value='seller' AND user_id!=".$user_id;									$seller_list=$wpdb->get_results($sql_query);									foreach ($seller_list as $key => $value) {										$seller=get_user_by('id',$value->user_id);										?>										<option value="<?php echo $seller->ID; ?>"><?php echo $seller->user_nicename; ?></option>										<?php									}									?>								</select>							</li>						</ul>					</fieldset>					<!-- <input type="hidden" value="dodelete" name="action"> -->					 <?php wp_nonce_field( 'marketplace-delete-seller' ); ?>					<p class="submit">						<input type="submit" value="Confirm Deletion" name="submit">					</p>				</div>			</form>			<?php			/*==================*/				exit;			}			if((wp_create_nonce('confirm_yes_mp_nonceuser_'.$_GET['user'])==$_GET['_wpnonce']) && is_admin() && ! empty( $_POST['_wpnonce']))			{				wp_verify_nonce( $_POST['_wpnonce'], 'marketplace-delete-seller' );				$user_id=$_GET['user'];				$delete_option=$_POST['delete_option'];				if($delete_option=='reassign'){					$reassign_user_id=$_POST['reassign_user'];					wp_delete_user( $user_id, $reassign_user_id );				}else{					wp_delete_user( $user_id );				}				wp_redirect( "?page=sellers" );				exit;			}		}	}	function getdata(){		global $wpdb;		$table_name1 = $wpdb->prefix . "usermeta";		$table_name2 = $wpdb->prefix . "mpsellerinfo";		$fresult = array();		if(isset($_POST['s']))		{			$m_seller=$_POST['s'];			$query = "Select Distinct A.user_id,A.seller_value from $table_name2 as A join {$wpdb->prefix}users user on user.ID=A.user_id where (user.user_login LIKE '".$m_seller."%' or user.user_login LIKE '%".$m_seller."' or user.user_login LIKE '%".$m_seller."%')";		}		else		{			$query = "Select Distinct A.user_id,A.seller_value from $table_name2 as A join {$wpdb->prefix}users user on user.ID=A.user_id";		}		$user_ids = $wpdb->get_results($query, ARRAY_A);		foreach($user_ids as $id){		$user_result[] = get_user_meta($id['user_id']);		$user_data[]=get_userdata($id['user_id']);		$user_edit_link[]=get_edit_user_link($id['user_id']);		$user_products[] = $wpdb->get_results("SELECT COUNT( ID ) AS product FROM {$wpdb->prefix}posts WHERE post_author='".$id['user_id']."' and post_type='product'");		}		$i=0;		if(!empty($user_result))		{		foreach( $user_result as $result )		{			$fresult[$i]['id']=$user_data[$i]->data->ID;			$fresult[$i]['nickname'] ='<a href="'.$user_edit_link[$i].'">'. $user_data[$i]->data->user_login.'</a>';			$fresult[$i]['name'] = $result['first_name'][0]."&nbsp;".$result['last_name'][0];			$fresult[$i]['user_email']= $user_data[$i]->data->user_email;			$fresult[$i]['user_posts']=$user_products[$i][0]->product;			if($user_ids[$i]['seller_value']=='seller')			{				$user_ids[$i]['seller_value']='1';				$fresult[$i]['seller_approval']="<a href='javascript:void(0);' class='wk_seller_app_button active' id='wk_seller_approval_mp".$user_ids[$i]['user_id']."_mp".$user_ids[$i]['seller_value']."'>Disapprove</a>";			}			else{				$user_ids[$i]['seller_value']='0';				$fresult[$i]['seller_approval']="<a href='javascript:void(0);' class='wk_seller_app_button' id='wk_seller_approval_mp".$user_ids[$i]['user_id']."_mp".$user_ids[$i]['seller_value']."'>Approve</a>";			}			$i++;		}	}	return $fresult;}function column_default( $item, $column_name ) {    switch( $column_name ) {	case 'nickname':    case 'name':	case 'user_email':	case 'user_posts':	case 'seller_approval':     return $item[ $column_name ];    default:      return print_r( $item, true ) ; //Show the whole array for troubleshooting purposes  }}function get_columns(){  $columns = array(   'cb'        => '<input type="checkbox" />',	'nickname' => 'UserName',    'name' => 'Name',	'user_email'=>'E-mail',	'user_posts'=>'Products',	'seller_approval'=>'Seller Access'  );  return $columns;}function prepare_items() {	$columns = $this->get_columns();	$hidden = array();	$found_data=array();	$sortable = $this->get_sortable_columns();	$this->_column_headers = array($columns, $hidden, $sortable);	$this->_column_headers = $this->get_column_info();	$this->process_bulk_action();	$seller_data=$this->getdata();	$item_data=$this->getdata();	if(!empty($seller_data))	{		usort( $item_data, array($this, 'usort_reorder' ) );	}	$per_page = get_option('posts_per_page');	$current_page = $this->get_pagenum();	$total_items = count($this->getdata());	if(!empty($seller_data))	{	$item_data = array_slice($this->getdata(),(($current_page-1)*$per_page),$per_page);	}	$this->set_pagination_args( array(	'total_items' => $total_items,	'per_page'    => $per_page	) );	$this->items = $item_data;}public function process_bulk_action(){    // security check!	if ( isset( $_GET['_wpnonce'] ) && ! empty( $_GET['_wpnonce'] ) ) {		$_POST['_wpnonce'];		$nonce  = filter_input( INPUT_GET, '_wpnonce', FILTER_SANITIZE_STRING );        $action = 'bulk-' . $this->_args['plural'];        if ( ! wp_verify_nonce( $nonce, $action ) )            wp_die( 'Nope! Security check failed!' );	}	$action = $this->current_action();    switch ( $action ) {        case 'delete':        $user_id=$_GET['user'];		foreach($user_id as $u_id)		{			if($u_id==1) {				continue;			}			else {				$post_id=$wpdb->get_results("select ID from {$wpdb->prefix}posts where post_author='".$u_id."'");				foreach($post_id as $id)				{					if($wpdb->get_results("delete * from {$wpdb->prefix}postmeta where post_id='".$id->ID."'"))					{						wp_delete_post($id->ID);					}				}				$wpdb->get_results("delete * from {$wpdb->prefix}usermeta where user_id='".$u_id."'");				wp_delete_user($u_id);			}		}		echo __('User Deleted', 'marketplace');		echo "<a href='?page=sellers'>Go Back To seller List</a>";        break;		default:        break;    }}function get_bulk_actions() {	$actions = array(    	'delete'    => 'Delete'  	);   	return $actions;}function column_cb($item) {    return sprintf('<input type="checkbox" id="user_%s"name="user[]" value="%s" />',$item['id'], $item['id']);}	//action start herefunction column_nickname($item) {	$nonce = wp_create_nonce('remove-users');	$actions = array(        'edit'      => sprintf('<a href="'.get_edit_user_link($item['id']).'">Edit</a>'),        'delete'    => sprintf('<a class="submitdelete" href="?page=sellers&action=delete&user=%s&_wpnonce=%s">Delete</a>',$item['id'],wp_create_nonce('del_mp_nonceuser_'.$item['id']))    );  	return sprintf('%1$s %2$s', $item['nickname'], $this->row_actions($actions) );}//shorting on title clickfunction get_sortable_columns() {  	$sortable_columns = array(    	'nickname'  => array('nickname',false),    	'name' => array('name',false),    	'user_email'   => array('user_email',false)  	);  	return $sortable_columns;}function usort_reorder( $a, $b ) {	$orderby = ( ! empty( $_GET['orderby'] ) ) ? $_GET['orderby'] : 'name';  	$order = ( ! empty($_GET['order'] ) ) ? $_GET['order'] : 'asc';  	$result = strcmp( $a[$orderby], $b[$orderby] );  	return ( $order === 'asc' ) ? $result : -$result;}function test_table_set_option($status, $option, $value) {	return $value;}function register_mp_menu_page(){    add_menu_page( 'Mp menu', 'Seller List', '', 'seller list page', 'my_custom_menu_page', plugins_url( 'marketplace/assets/images/tick.png' ), 6 );}function update_deleted_user(){	global $wpdb;	$wpdb->get_results("Delete from {$wpdb->prefix}mpsellerinfo where user_id not in(select ID from {$wpdb->prefix}users)");}function add_options(){	global $ListTable;  	$option = 'per_page';  	$args = array(        'label' => 'Seller',        'default' => 10,        'option' => 'seller_per_page'    );  	add_screen_option( $option, $args );  	$ListTable = new Seller_List_Table;}//seller searchfunction mp_search_seller(){?>	<form action="<?php $this->prepare_items();?>"method="post">  		<input type="hidden" name="page" value="my_list_test" />  		<?php $this->search_box('search', 'mp_search_seller'); ?>	</form><?php}//seller search end}$sellerListTable = new Seller_List_Table();$sellerListTable->update_deleted_user();$sellerListTable->delete_mp_seller();$sellerListTable->mp_search_seller();add_filter('set-screen-option', 'test_table_set_option', 10, 3);printf( '<div class="wrap" id="seller-list-table"><h2>%s</h2>', __( 'Seller List', 'marketplace' ) );echo '<form id="seller-list-table-form" method="get">';$page  = filter_input( INPUT_GET, 'page', FILTER_SANITIZE_STRIPPED );$paged = filter_input( INPUT_GET, 'paged', FILTER_SANITIZE_NUMBER_INT );printf( '<input type="hidden" name="page" value="%s" />', $page );printf( '<input type="hidden" name="paged" value="%d" />', $paged );$sellerListTable->prepare_items(); // this will prepare the items AND process the bulk actions$sellerListTable->display();echo '</form>';echo '</div>';